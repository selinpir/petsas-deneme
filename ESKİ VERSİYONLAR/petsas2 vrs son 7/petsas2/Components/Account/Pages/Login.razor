@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using petsas2.Data
@* dependency injection *@
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Giriş Yap</PageTitle>


<div class="container">
    <div class="row justify-content-center align-items-center" style="min-height: 60vh;">
        <!-- Login Form -->
        <div class="col-md-4">
            <section>
                <StatusMessage Message="@errorMessage" />

                <EditForm Model="Input" FormName="LoginForm" OnValidSubmit="LoginUser">
                    <DataAnnotationsValidator />
                    <h2>PetSas'a Hoşgeldin!</h2>
                    <hr />
                    <ValidationSummary class="text-danger" role="alert" />

                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.Email"
                                   class="form-control"
                                   autocomplete="username"
                                   placeholder="name@example.com" />
                        <label for="email">Email</label>
                        <ValidationMessage For="() => Input.Email" class="text-danger" />
                    </div>

                    <div class="form-floating mb-3">
                        <InputText type="password"
                                   @bind-Value="Input.Password"
                                   class="form-control"
                                   autocomplete="current-password"
                                   placeholder="password" />
                        <label for="password">Şifre</label>
                        <ValidationMessage For="() => Input.Password" class="text-danger" />
                    </div>

                    <div class="checkbox mb-3">
                        <label>
                            <InputCheckbox @bind-Value="Input.RememberMe"
                                           class="form-check-input me-2" />
                            Beni Hatırla
                        </label>
                    </div>
                    <button type="submit"
                            class="w-100 btn btn-lg btn-primary"
                            style="background-color: #b385e0; border-color: #b385e0;
">
                        Giriş Yap
                    </button>

                    <div class="text-center small">
                        @*  <a href="Account/ForgotPassword">Şifreni mi unuttun?</a><br /> *@

                        <a href="@(NavigationManager.GetUriWithQueryParameters(
                         "Account/Register",
                         new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">
                            Hesabın mı yok? Kayıt ol!
                        </a><br />
                    </div>
                </EditForm>
            </section>
        </div>

        <!-- Görsel -->
        <div class="col-md-4 text-center">
            <img src="/img/loginCat.png"
                 class="img-fluid rounded shadow-sm"
                 style="max-height: 300px; object-fit: cover;"
                 alt="Login " />
        </div>
    </div>
</div>


@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user == null)
        {
            return;
        }
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");

            // sadece rol bazlı yönlendirme:
            if (await UserManager.IsInRoleAsync(user, "Admin"))
                NavigationManager.NavigateTo("/Admin/AdminDashboard");

            else if (await UserManager.IsInRoleAsync(user, "Supplier"))
                NavigationManager.NavigateTo("/Supplier/SupplierDashboard");

            else
                NavigationManager.NavigateTo("/User/UserDashboard");
        }
        //?????????
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }

        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }



}
