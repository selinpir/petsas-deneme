@page "/User/Adres"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@using System.ComponentModel.DataAnnotations
@using petsas2.Data
@using petsas2.Models
@using petsas2.Services.Interface
@using Microsoft.EntityFrameworkCore


@attribute [Authorize(Roles = "User")]

@inject ApplicationDbContext _context
@inject IAdresService AdresService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthStateProvider

<MudGrid Gutter="Gutter.Def">
    <MudItem xs="12">
        <MudTextField Label="Şu Anda Buradasınız" Value="ReadOnly" ReadOnly="true" Variant="Variant.Outlined" />
    </MudItem>
</MudGrid>

@if (adres == null)
{
    <MudText Typo="Typo.body1" Color="Color.Secondary">Yükleniyor...</MudText>
}
else if (!adres.IsCompleted || yeniAdresEkle)
{
    <MudPaper Class="p-4 mx-auto" Style="max-width:600px">
        <MudForm @ref="form">

            <MudSelect Label="İl Seç" T="int"
                       Value="@selectedIlId"
                       ValueChanged="@OnIlChanged"
                       ValueExpression="() => selectedIlId"
                       Dense="true"
                       Required="true"
                       HelperText="Lütfen il seçiniz">
                @foreach (var il in Iller)
                {
                    <MudSelectItem Value="@il.Id">@il.Ad</MudSelectItem>
                }
            </MudSelect>

           <MudSelect Label="İlçe Seç" T="int"
                       Value="@adres.IlceId"
                       ValueChanged="@(v => adres.IlceId = v)"
                       ValueExpression="() => adres.IlceId"
                       Dense="true"
                       Required="true"
                       HelperText="Lütfen ilçe seçiniz">
                @foreach (var ilce in Ilceler)
                {
                    <MudSelectItem Value="@ilce.Id">@ilce.Ad</MudSelectItem>
                }
            </MudSelect>

            <MudTextField Label="Adres Adı" @bind-Value="adres.AdresAdi" Required="true" />
            <MudTextField Label="Açık Adres" @bind-Value="adres.AcikAdres" Required="true" />

             <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="Kaydet">Kaydet</MudButton> 
        </MudForm>
    </MudPaper>
}
else
{
    <MudPaper Class="p-4 mx-auto" Style="max-width:600px">
        <MudText Typo="Typo.h6">Adresiniz Kaydedildi.</MudText>
        <MudDivider Class="my-2" />

        <MudText Typo="Typo.body1"><b>Adres Adı:</b> @adres.AdresAdi</MudText>
        <MudText Typo="Typo.body1"><b>Adres:</b> @adres.AcikAdres</MudText>
        <MudText Typo="Typo.body1"><b>İl:</b> @adres.Il?.Ad</MudText>
        <MudText Typo="Typo.body1"><b>İlçe:</b> @adres.Ilce?.Ad</MudText>

        <MudDivider Class="my-2" />

        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" FullWidth="true" OnClick="@(() => yeniAdresEkle = true)">
            Yeni Adres Ekle
        </MudButton>

        <MudButton Class="mt-2" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="@(() => Navigation.NavigateTo("/user/userDashboard"))">
            Geri Dön
        </MudButton>
    </MudPaper>
}

@code {  
    public string ReadOnly { get; set; } = "Adres Bilgilerim";
    private MudForm form;
    private AdresBilgileri adres = new();
   

    private bool yeniAdresEkle = false;

    private List<Il> Iller = new();
    private List<Ilce> Ilceler = new();
    private int selectedIlId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user?.FindFirst(c => c.Type == "sub")?.Value
                     ?? user?.FindFirst("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")?.Value;

        if (userId is null)
        {
            Snackbar.Add("Kullanıcı kimliği alınamadı.", Severity.Error);
            return;
        }

        var adresListesi = await AdresService.GetAdreslerByUserIdAsync(userId);
        adres = adresListesi.FirstOrDefault();

        if (adres == null)
        {
            adres = new AdresBilgileri();
            yeniAdresEkle = true;
        }

        // illeri ve ilçeleri çek
        Iller = await _context.Iller.OrderBy(i => i.Ad).ToListAsync();
        Ilceler = await _context.Ilceler.OrderBy(i => i.Ad).ToListAsync();
    }

    private async Task OnIlChanged(int ilId)
    {
        selectedIlId = ilId;
        adres.IlId = ilId;
        adres.IlceId = 0;

        Ilceler = await _context.Ilceler
            .Where(x => x.IlId == ilId)
            .OrderBy(x => x.Ad)
            .ToListAsync();
    }

    private async Task Kaydet()
    {
        await form.Validate();

        if (form.IsValid)
        {
            adres.IsCompleted = true;
            await AdresService.AddAdresAsync(adres);
            Snackbar.Add("Adres bilgileri kaydedildi.", Severity.Success);
            yeniAdresEkle = false;
        }
        else
        {
            Snackbar.Add("Lütfen eksik alanları doldurunuz.", Severity.Error);
        }
    }
}