@page "/User/Adres"
@using MudBlazor
@using System.ComponentModel.DataAnnotations
@using petsas2.Models
@using petsas2.Services.Interface
@attribute [Authorize]
@attribute [Authorize(Roles = "User")];
@using Microsoft.AspNetCore.Authorization

@inject IAdresService AdresService
@inject IHesapService HesapService

@inject NavigationManager Navigation
@inject MudBlazor.ISnackbar Snackbar

<MudGrid Gutter="Gutter.Def">
    <MudItem xs="12">
        <MudTextField T="string"
                      Value="ReadOnly"
                      Label="Şu Anda Buradasınız"
                      ReadOnly="true"
                      Variant="Variant.Outlined" />
    </MudItem>
</MudGrid>

@* adres yoksa adres eklenir adres güncelleme yok istenmezse adres silinir, adres varsa adres bilgileri gösterilir.*@
@if (adres == null)
{
    <MudText Typo="Typo.body1" Color="Color.Secondary">Yükleniyor...</MudText>
}
else if (!adresVarMi)
{
    @* Form *@
    <MudPaper Class="p-4 mx-auto" Elevation="15" Style="max-width:600px">
        <br />
        <br />
        <MudForm @ref="form">
            <MudSelect T="int" Label="İl"
                       @bind-Value="SelectedIlId"
                       Required="true">
                <MudSelectItem Value="0" Disabled="true">Seçiniz</MudSelectItem>
                @foreach (var il in IlDb)
                {
                    <MudSelectItem Value="@il.Id">@il.IlAd</MudSelectItem>
                }
            </MudSelect>

            <MudSelect T="int" Label="İlçe"
                       @bind-Value="SelectedIlceId"
                       Required="true">
                <MudSelectItem Value="0" Disabled="true">Seçiniz</MudSelectItem>
                @foreach (var ilce in filteredIlce)
                {
                    <MudSelectItem Value="@ilce.Id">@ilce.IlceAd</MudSelectItem>
                }
            </MudSelect>

            <MudTextField T="string" Label="Adres Adı" @bind-Value="adres.AdresAdi" />
            <MudTextField T="string" Label="Açık Adres" @bind-Value="adres.AcikAdres" Lines="5" />
            <br />
            <br />
            <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true"
                       OnClick="@Kaydet">
                Kaydet
            </MudButton>
        </MudForm>
    </MudPaper>
}
else
{
    @* Mevcut adres bilgileri *@
    <br />
    <br />
    <MudGrid>
        <MudItem xs="12" >
            <MudPaper Class="p-4 mx-auto" Elevation="15"  Style=" border-radius: 10px; max-width:600px">
                <MudField Label="İL">
                    <MudText Typo="Typo.subtitle1">@adres.Il</MudText>
                </MudField>
                <MudField Label="İlçe">
                    <MudText Typo="Typo.subtitle1">@adres.Ilce</MudText>
                </MudField>
                <MudField Label="Adres Başlığı">
                    <MudText Typo="Typo.subtitle1">@adres.AdresAdi</MudText>
                </MudField>
                <MudField Label="Açık Adres">
                    <MudText Typo="Typo.subtitle1">@adres.AcikAdres</MudText>
                </MudField>
            </MudPaper>
        </MudItem>
    </MudGrid>
    <br />
    <br />
    <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true"
               OnClick="@(() => Navigation.NavigateTo("/user/userDashboard"))">
        Geri Dön
    </MudButton>
}
@code {
    private string ReadOnly { get; set; } = "Adres Bilgilerim";
    private bool adresVarMi = false;
    MudForm? form;
    AdresBilgileri adres = new();
    List<Il> iller = new();
    List<Ilce> ilceler = new();

    private List<Il> IlDb = new();        // Şehirler
    private List<Ilce> filteredIlce = new(); // Seçilen ile göre filtrelenecek

    private int selectedIlId;
    public int SelectedIlId
    {
        get => selectedIlId;
        set
        {
            if (selectedIlId != value)
            {
                selectedIlId = value;
                _ = OnIlChanged(value); // ilçe listesini güncelle
            }
        }
    }
    private async Task OnIlChanged(int ilId)
    {
        var allIlceler = await AdresService.GetIlceAsync();
        filteredIlce = allIlceler.Where(x => x.IlId == ilId).ToList();
        SelectedIlceId = 0; // her il değişince ilçe sıfırlanır
    }
    public int SelectedIlceId { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        IlDb = await AdresService.GetIlAsync();

        var hesap = await HesapService.GetCurrentUserHesapAsync();
        if (hesap is not null)
        {
            var adresler = await AdresService.GetAdresByHesapIdAsync(hesap.HBId);
            adres = adresler.FirstOrDefault();

            if (adres == null)
            {
                adres = new AdresBilgileri(); // form için boş nesne
                adresVarMi = false;
            }
            else
            {
                adresVarMi = true;
                SelectedIlId = adres.IlId ?? 0;
                SelectedIlceId = adres.IlceId ?? 0;
            }
        }
    }

    private async Task Kaydet()
    {
        // Form validasyonunu çalıştır
        await form!.Validate();

        if (!form.IsValid)
        {
            Snackbar.Add("Lütfen tüm alanları eksiksiz doldurun.", Severity.Warning);
            return;
        }

        // İl ve ilçe seçimi kontrolü
        if (SelectedIlId == 0 || SelectedIlceId == 0)
        {
            Snackbar.Add("Lütfen il ve ilçe seçiniz.", Severity.Warning);
            return;
        }

        // İl ve ilçe ID'lerini modele ata
        adres.IlId = SelectedIlId;
        adres.IlceId = SelectedIlceId;

        // Giriş yapan kullanıcıya ait hesap bilgilerini al
        var hesap = await HesapService.GetCurrentUserHesapAsync();
        if (hesap is null)
        {
            Snackbar.Add("Kullanıcı bilgileri alınamadı.", Severity.Error);
            return;
        }

        // Adrese kullanıcı hesap ID'sini ata
        adres.HesapBilgileriId = hesap.HBId;

        try
        {
            await AdresService.AddAdresAsync(adres);
            Snackbar.Add("Adres başarıyla kaydedildi.", Severity.Success);
            Navigation.NavigateTo("/user/userDashboard");
        }
        catch (Exception ex)
        {
            Snackbar.Add("Adres kaydedilirken bir hata oluştu: " + ex.Message, Severity.Error);
        }
    }

}