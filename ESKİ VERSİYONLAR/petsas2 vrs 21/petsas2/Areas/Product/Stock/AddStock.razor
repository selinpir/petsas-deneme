@page "/stock/AddStock/{productId:int}"

@attribute [Authorize(Roles = "Admin,Supplier")]

@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@using petsas2.Models
@using petsas2.Services.Interface

@inject IProductService ProductService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@* geri don icin *@
@using Microsoft.JSInterop
@inject IJSRuntime JS

<MudGrid GutterSize="2">
    <MudItem xs="12">
        <MudTextField T="string"
                      Value="ReadOnly"
                      Label="Şu Anda Buradasınız"
                      ReadOnly="true"
                      Variant="Variant.Outlined" />
    </MudItem>
</MudGrid>

@if (product == null)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.subtitle1">Ürün: @product.Name</MudText>

        <MudNumericField T="int"
                         @bind-Value="stockToAdd"
                         Label="Eklenecek Miktar"
                         Variant="Variant.Outlined"
                         Required="true"
                         Min="1"
                         Max="30"
                         Immediate="true"
                         Validation='@((int qty) => qty < 1 ? "En az 1 adet girmelisiniz." : null)' />

        <div class="mt-4 d-flex gap-2">
            <MudButton Variant="Variant.Filled"
                       Color="Color.Success"
                       OnClick="AddNormStockAsync">
                Kaydet
            </MudButton>

            <MudButton Variant="Variant.Text"
                       Color="Color.Default"
                       OnClick="GoBack">
                Vazgeç
            </MudButton>
        </div>
    </MudPaper>
}

@code {
    public string ReadOnly { get; set; } = "Stok Ekle";

    [Parameter] public int productId { get; set; }
    private Product? product;
    private int stockToAdd;

    protected override async Task OnInitializedAsync()
    {
        product = await ProductService.GetByIdAsync(productId);
    }

    private async Task AddNormStockAsync()
    {
        if (stockToAdd < 1)
        {
            Snackbar.Add("En az 1 adet girmelisiniz.", Severity.Warning);
            return;
        }
        await ProductService.AddNormStockAsync(productId, stockToAdd);
        Snackbar.Add($"{stockToAdd} adet stok eklendi.", Severity.Success);
        await JS.InvokeVoidAsync("history.back");
    }

    private void Cancel() => Navigation.NavigateTo("");

    private async Task GoBack()
    {
        // tarayıcı geçmişinde geri gider
        await JS.InvokeVoidAsync("history.back");
    }
}