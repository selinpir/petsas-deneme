@page "/user/Petlerim"

@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor
@using System.ComponentModel.DataAnnotations
@using petsas2.Models
@using petsas2.Services.Interface
@attribute [Authorize]
@attribute [Authorize(Roles = "User")];
@using Microsoft.AspNetCore.Authorization

@inject IPetService PetService
@inject IHesapService HesapService
@inject ICategoryService CategoryService

@inject NavigationManager Navigation
@inject MudBlazor.ISnackbar Snackbar
@inject IWebHostEnvironment Env

<MudGrid Gutter="Gutter.Def">
    <MudItem xs="12">
        <MudTextField T="string"
                      Value="ReadOnly"
                      Label="Şu Anda Buradasınız"
                      ReadOnly="true"
                      Variant="Variant.Outlined" />
    </MudItem>
</MudGrid>

@* hiç pet yoksa yeni pet ekle pet varsa peti göster ve altta yeni pet ekle yaz *@
<MudPaper Class="p-4">
    @if (PetList.Count > 0)
    {
        <h4>Pet Bilgilerim</h4>
        @foreach (var pet in PetList)
        {
            <MudCard Class="mb-3">
                <MudCardContent>
                    <MudText>  <strong>Pet Adı : </strong>  @pet.PetAdi</MudText>
                    <MudText>  <strong>Pet Türü :</strong>  @pet.Category.PetType</MudText>
                    <MudText>  <strong>Doğum Tarihi:</strong>  @(pet.PetDogum?.ToString("dd.MM.yyyy") ?? "Belirtilmedi")</MudText>
                    <MudText>  <strong>Ek Metin(alerji vs.):</strong>  @pet.EkMetin</MudText>
                    @if (!string.IsNullOrEmpty(pet.GorselUrl))
                    {
                        <MudImage Src="@pet.GorselUrl" Width="150" />
                    }
                    <MudButton Color="Color.Error" Variant="Variant.Outlined" OnClick="@(() => DeletePet(pet.PBId))">
                        Peti Sil
                    </MudButton>
                </MudCardContent>
            </MudCard>
        }
        <MudDivider />
        <MudButton Variant="Variant.Filled" OnClick="@(() => ShowForm = true)">
            Yeni Pet Ekle
        </MudButton>
    }
    @if (PetList.Count == 0 || ShowForm)
    {
        <MudForm @ref="form">
            <MudSelect T="int" Label="Kategori" @bind-Value="SelectedCategoryId" Required="true">
                <MudSelectItem Value="0" Disabled="true">Seçiniz</MudSelectItem>
                @foreach (var cat in categories)
                {
                    <MudSelectItem Value="@cat.Id">@cat.PetType</MudSelectItem>
                }
            </MudSelect>

            <MudTextField @bind-Value="Pet.PetAdi" Label="Pet Adı" Required="true" />

            <MudFileUpload T="IBrowserFile" MaxFileSize="1024*1024*5"
                           Accept="image/jpeg,image/png" FilesChanged="UploadFile"
                           Required="true">
                <ActivatorContent>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">
                        Pet Görseli Yükle
                    </MudButton>
                </ActivatorContent>
            </MudFileUpload>

            <MudDatePicker T="DateTime?" Label="Doğum Tarihi"
                           @bind-Date="Pet.PetDogum"
                           MaxDate="DateTime.Today"
                           DateFormat="dd.MM.yyyy" />

            <MudTextField T="string" Label="Ek Metin" @bind-Value="Pet.EkMetin" Lines="5" />

            <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="Kaydet">
                Kaydet
            </MudButton>
        </MudForm>
    }
    <br />
    <br />
    <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true"
               OnClick="@(() => Navigation.NavigateTo("/user/userDashboard"))">
        Geri Dön
    </MudButton>
</MudPaper>

@code {
    public string ReadOnly { get; set; } = "Pet Bilgilerim";
    MudForm? form;
    PetBilgileri Pet = new();
    List<PetBilgileri> PetList = new();

    IBrowserFile? _imageFile;
    List<Category> categories = new();
    int SelectedCategoryId;
    bool ShowForm = false;

    protected override async Task OnInitializedAsync()
    {
        categories = await PetService.GetCategoriesAsync(); // bunu servisle getiriyorsan
        var hesap = await HesapService.GetCurrentUserHesapAsync();
        if (hesap is null) return;

        PetList = await PetService.GetPetsByHesapIdAsync(hesap.HBId);
    }

    // gorsel secimi
    private void UploadFile(IBrowserFile file)
    {
        _imageFile = file;
    }


    private async Task Kaydet()
    {
        await form!.Validate();
        if (!form.IsValid || SelectedCategoryId == 0)
            return;

        var hesap = await HesapService.GetCurrentUserHesapAsync();
        if (hesap is null) return;

        Pet.HesapBilgileriId = hesap.HBId;
        Pet.CategoryId = SelectedCategoryId;

        // Görsel kaydet
        if (_imageFile is not null)
        {
            var imagesFolder = Path.Combine(Env.WebRootPath, "images", "pets");
            if (!Directory.Exists(imagesFolder))
                Directory.CreateDirectory(imagesFolder);

            var ext = Path.GetExtension(_imageFile.Name);
            var uniqueFileName = $"{Guid.NewGuid()}{ext}";
            var filePath = Path.Combine(imagesFolder, uniqueFileName);

            await using var stream = _imageFile.OpenReadStream(maxAllowedSize: 1024 * 1024 * 20);
            await using var fs = new FileStream(filePath, FileMode.Create);
            await stream.CopyToAsync(fs);

            // Model’e relative yol atayın
            Pet.GorselUrl = $"/images/pets/{uniqueFileName}";
        }

        await PetService.AddPetAsync(Pet);
        Pet = new(); // formu sıfırla
        _imageFile = null;
        ShowForm = false;

        PetList = await PetService.GetPetsByHesapIdAsync(hesap.HBId); // listeyi güncelle
    }

    private async Task DeletePet(int petId)
    {
        await PetService.DeletePetAsync(petId);
        var hesap = await HesapService.GetCurrentUserHesapAsync();
        PetList = await PetService.GetPetsByHesapIdAsync(hesap!.HBId);
    }
}