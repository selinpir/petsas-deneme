@page "/product/ProductIndex"
@attribute [Authorize(Roles = "Admin")]

@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@using petsas2.Models
@using petsas2.Services.Interface

@inject IProductService ProductService
@inject IPricingService PricingService
@inject ICategoryService CategoryService
@inject ISubCategoryService SubCategoryService
@inject IDialogService DialogService

@inject NavigationManager Navigation

<MudGrid GutterSize="2">
    <MudItem xs="12">
        <MudTextField T="string"
                      Value="ReadOnly"
                      Label="Şu Anda Buradasınız"
                      ReadOnly="true"
                      Variant="Variant.Outlined" />
    </MudItem>
</MudGrid>

<MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true"
           OnClick="@(() => Navigation.NavigateTo("/product/ProductCreate"))">
    Yeni Ürün Ekle
</MudButton>

@*  ARAMA ÇUBUGU *@
<MudTextField @bind-Value="_searchString"
              Placeholder="Search"
              Adornment="Adornment.Start"
              Immediate="true"
              AdornmentIcon="@Icons.Material.Filled.Search"
              IconSize="Size.Medium"
              Class="mt-0" />
@*  ARAMA ÇUBUGU *@

<MudTable Items="@products" Filter="_quickFilter" Hover="true" Striped="true" Bordered="true">
   @*  üst başlık *@
    <HeaderContent>
        <MudTh>İşlemler</MudTh>
        <MudTh>Ad</MudTh>
        <MudTh>Barkod</MudTh>
        <MudTh>Marka</MudTh>
        <MudTh>Kategori</MudTh>
        <MudTh>Alt Kategori</MudTh>
        <MudTh>Görsel</MudTh>
        <MudTh>Stok</MudTh>
        <MudTh>Min Stok</MudTh>
        <MudTh>Fiyat</MudTh>

        <MudTh>Son Kullanma Tarihi</MudTh>
        <MudTh>Renk</MudTh>
        <MudTh>Ağırlık</MudTh>
        <MudTh>Ebat</MudTh>
        <MudTh>Beden</MudTh>
        <MudTh>Malzeme</MudTh>
    </HeaderContent>
      @*  üst başlık *@

  @*   içerik  *@
    <RowTemplate Context="p">

        <MudTd>
        @*      <MudIconButton Icon="@Icons.Material.Filled.Paid"                         
                           Color="Color.Error"
                           OnClick="@(()=>Navigation.NavigateTo($"/product/UpdateProductPricing/{p.Id}"))"
                           ToolTip="Fiyatlandır" /> *@ 

        @*    <MudIconButton Icon="@Icons.Material.Filled.AddShoppingCart"
                           Color="Color.Warning"
                           OnClick="@(()=>Navigation.NavigateTo($"/stock/AddStock/{p.Id}"))"
                           ToolTip="Stok Ekle" /> *@
        @* 
            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                           Color="Color.Error"
                           OnClick="@(()=>Delete(p.Id))"
                           ToolTip="Ürünü Sil" /> *@

            <MudButton Variant="Variant.Text"
                       Color="Color.Error"
                       StartIcon="@Icons.Material.Filled.AddShoppingCart"
                       OnClick="@(()=>Navigation.NavigateTo($"/product/UpdateProductPricing/{p.Id}"))">
                Fiyatını Güncelle
            </MudButton>

            <MudButton Variant="Variant.Text"
                       Color="Color.Warning"
                       StartIcon="@Icons.Material.Filled.Paid"
                       OnClick="@(()=>Navigation.NavigateTo($"/stock/AddStock/{p.Id}"))">
                Stok Ekle
            </MudButton>

            <MudButton Variant="Variant.Text"
                       Color="Color.Warning"
                       StartIcon="@Icons.Material.Filled.Delete"
                       OnClick="@(()=>Delete(p.Id))">
                Ürünü Sil
            </MudButton>

        </MudTd>

        <MudTd>@p.Name</MudTd>

        <MudTd>@p.Barcode</MudTd>

        <MudTd>@p.Brand?.Name</MudTd>

        <MudTd DataLabel="Üst Kategori">@p.SubCategory?.Category?.PetType</MudTd>

        <MudTd>@p.SubCategory?.ProductName</MudTd>

        <MudTd>
            @if (!string.IsNullOrWhiteSpace(p.ImageUrl))
            {
                <img src="@p.ImageUrl"
                     alt="Ürün Görseli"
                     style="width:60px; height:60px; object-fit:cover; border-radius:4px;" />
            }
        </MudTd>

        <MudTd Style="@GetStockStyle(p)">
            @p.Stock
        </MudTd>

        <MudTd> @p.MinStock</MudTd>

        @*   c-> para birimine dönüştür *@
        <MudTd> @(currentPrices[p.Id]?.BrutFiyat.ToString("C") ?? "-")</MudTd>

        <MudTd>@p.ExpirationDate</MudTd>

        <MudTd>@p.Color</MudTd>

        <MudTd>@p.Weight</MudTd>

        <MudTd>@p.Dimensions</MudTd>

        <MudTd>@p.Size</MudTd>

        <MudTd>@p.Material</MudTd>
    </RowTemplate>
    @*   içerik  *@
</MudTable>

@code {
    public string ReadOnly { get; set; } = "Ürün Listele";
    private string _searchString = "";

    List<Product>? products;

    //fiyat
    Dictionary<int, Pricing?> currentPrices = new();

    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetAllAsync();
        foreach (var p in products)
            currentPrices[p.Id] = await PricingService.GetCurrentAsync(p.Id);
    }

    string? GetStockStyle(Product p)
    {
        //stok min stoğa eşit veya kucukse uyarıı
        return p.Stock <= p.MinStock
            ? "color:red;font-weight:bold" // Koşul doğruysa
            : null; // Koşul yanlıssa
    }

    async Task Delete(int id)
    {
        bool? ok = await DialogService.ShowMessageBox(
            "Sil",
            "Bu ürünü silmek istediğinize emin misiniz?",
            yesText: "Evet",
            cancelText: "Vazgeç");

        if (ok == true)
        {
            // soft-delete
            await ProductService.SoftDeleteAsync(id);
            products = await ProductService.GetAllAsync();
            StateHasChanged();
        }
    }

    //ARAMA ÇUBUGU
    private Func<Product, bool> _quickFilter => x =>
       {
           if (string.IsNullOrWhiteSpace(_searchString))
               return true;

           // ara büyük küçük harf duyarsız
           if (x.Name?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
               return true;
           //kategori
           if (x.SubCategory?.Category?.PetType.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
               return true;
           //alt kategori
           if (x.SubCategory?.ProductName?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
               return true;
           //marka
           if (x.Brand?.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
               return true;
           //Daha fazla eklenebilir de eklemedim suanlık ve boş bırakilabilen alan eklenmesinde hata oldu ?
           return false;
       };
    //ARAMA ÇUBUGU
}